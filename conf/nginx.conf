  

#user and group to run as
#user ixnginx ixnginx;


# number of nginx workers
worker_processes  2;
#worker_cpu_affinity 1000 0100 0010 0001; 

error_log  /opt/nginx/logs/error.log;
# pid of nginx master process
pid  logs/nginx.pid;

# Number of worker connections. 1024 is a good default
events{
	worker_connections 2048;
}

# start the http module where we config http access.
http {
	passenger_root /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.11;
        passenger_ruby /usr/local/bin/ruby;
        passenger_user_switching off; 
        passenger_default_user root; 

	passenger_max_pool_size 15;

	# pull in mime-types. You can break out your config 
	# into as many include's as you want to make it cleaner
	include       mime.types;

	# set a default type for the rare situation that/usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.11
	# nothing matches from the mimie-type include
	default_type  application/octet-stream;
	

	 ## Size Limits
	 client_body_buffer_size   100k;
	 client_header_buffer_size 50k;
	 client_max_body_size      500M;
	 large_client_header_buffers 1 1k;

	 ## Timeouts 
	 client_body_timeout 10;
	 client_header_timeout 5;
	 keepalive_timeout     5 5;
	 send_timeout          5;	

	 ## General Options
	 ignore_invalid_headers   on;
	 limit_zone gulag $binary_remote_addr 1m;
	 recursive_error_pages    on;
	 sendfile                 on;
	 server_name_in_redirect  on;
	 server_tokens           off;
  
	 ## TCP options  
	 # tcp_nodelay on;
	 tcp_nopush  off;  

         gzip on;
	 gzip_http_version 1.1;
	 gzip_comp_level 9;
	 gzip_proxied any;
	 gzip_min_length  500;
	 gzip_buffers 16 8k;
	 gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript ;
  
	 # Some version of IE 6 don't handle compression well on some mime-types,
	 # so just disable for them
	 gzip_disable "MSIE [1-6].(?!.*SV1)";  
	 # Set a vary header so downstream proxies don't send cached gzipped 
	 # content to IE6
	 gzip_vary on;  

         # configure log format
	 log_format  main  '$time_local' '$request_time $remote_addr - $remote_user $status '
                		'"$request" "$http_referer" '
                		'"$http_user_agent" "http_x_forwarded_for" $body_bytes_sent "$gzip_ratio"';

	 # main access log
	 access_log  /opt/nginx/logs/access.log  main;

	 #upstream_fair_shm_size 1024k;	
  	 # production for qa on port 80 running from /var/www/ct_test
	 # This uses 4 mogrels from 4000 through 4003
	 #include production_nginx.conf;

server {
                 # port to listen on. Can also be set to an IP:PORT
                 listen    8084;

                 # sets the domain[s] that this vhost server requests for
                 #TBD
                 server_name 10.44.234.138;

                 # doc root
                 root /var/www/TestMate-Training-staging/current/public/;

                 passenger_enabled on;
                 passenger_use_global_queue on;

                 rails_env staging;

                 # vhost specific access log
                 access_log  logs/staging.access.log  main;

                 if (-f $document_root/maintenance.html){
                      rewrite  ^(.*)$  /maintenance.html last;
                      break;
                  }

                 # Block access to paths containing .svn
                   #--location ~* ^.*\.svn.*$ {
                   #--     #internal;
                   #--     return 444;
                  #--}
                  # serve static content directly

                 location ~* ^.+\.(jpg|jpeg|flv|gif|css|png|js|ico|html|swf|favicon\.ico|robots\.txt)$ {
                   access_log   off;
                   expires      365d;
                 }

                 #--location / {
                     #-- proxy_set_header Host $http_host;
                     # If the file exists as a static file serve it directly without
                     # running all the other rewite tests on it
		# running all the other rewite tests on it
                     #--if (-f $request_filename) {
                     #--  break;
                 #--}

                 # check for index.html for directory index
                 # if its there on the filesystem then rewite
                 # the url to add /index.html to the end of it
                 # and then break to send it to the next config rules.
                 #if (-f $request_filename/index.html) {
                   # rewrite (.*) $1/index.html break;
                 #}
                 # this is the meat of the rails page caching config
                 # it adds .html to the end of the url and then checks
                 # the filesystem for that file. If it exists, then we
                 # rewite the url to have explicit .html on the end
                 # and then send it on its way to the next config rule.
                 # if there is no file on the fs then it sets all the
                 # necessary headers and proxies to our upstream mongrels
                 #if (-f $request_filename.html) {
                 # rewrite (.*) $1.html break;
                #}

                #proxy_pass http://mongrel_cluster;
		   #--}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
          root   html;
        }
    }
server {
                 # port to listen on. Can also be set to an IP:PORT
                 listen    8085;

                 # sets the domain[s] that this vhost server requests for
                 #TBD
                 server_name 10.44.234.138;

                 # doc root
                 root /var/www/TestMate-Training/current/public/;

                 passenger_enabled on;
                 passenger_use_global_queue on;

                 rails_env production;

                 # vhost specific access log
                 access_log  logs/production.access.log  main;

                 if (-f $document_root/maintenance.html){
                      rewrite  ^(.*)$  /maintenance.html last;
                      break;
                  }

                 # Block access to paths containing .svn
                   #--location ~* ^.*\.svn.*$ {
                   #--     #internal;
                   #--     return 444;
                  #--}
                  # serve static content directly

                 location ~* ^.+\.(jpg|jpeg|flv|gif|css|png|js|ico|html|swf|favicon\.ico|robots\.txt)$ {
                   access_log   off;
                   expires      365d;
                 }
   #--location / {
                     #-- proxy_set_header Host $http_host;
                     # If the file exists as a static file serve it directly without
                     # running all the other rewite tests on it
                # running all the other rewite tests on it
                     #--if (-f $request_filename) {
                     #--  break;
                 #--}

                 # check for index.html for directory index
                 # if its there on the filesystem then rewite
                 # the url to add /index.html to the end of it
                 # and then break to send it to the next config rules.
                 #if (-f $request_filename/index.html) {
                   # rewrite (.*) $1/index.html break;
                 #}
                 # this is the meat of the rails page caching config
                 # it adds .html to the end of the url and then checks
                 # the filesystem for that file. If it exists, then we
                 # rewite the url to have explicit .html on the end
                 # and then send it on its way to the next config rule.
                 # if there is no file on the fs then it sets all the
                 # necessary headers and proxies to our upstream mongrels
                 #if (-f $request_filename.html) {
                 # rewrite (.*) $1.html break;
                #}

                #proxy_pass http://mongrel_cluster;
                   #--}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
          root   html;
        }
    }

}

