Heroku setup
==========================================================
rvm gem install heroku  -v=1.20.1
heroku keys:add
cd hellow_world    # go to application folder
git init
git add
git commit -m "initial import" .
heroku create sandiphero1
git push heroku master
heroku rake db:migrate

#after every changes first commit it
  git commit -m "rake use" .
  git push heroku master



note
------------

git clone -o heroku git@heroku.com:sandiphero1.git  #clone repository to your local computer
heroku login                                        # create an credential to your local computer 
heroku logout                                       #remove credential
heroku info                                         #information on repository
heroku sharing add devid36@gmail.com                #invite to other user for collaborating your 
                                                    application
heroku logs
heroku addons                                       
heroku rename newname



Capistrano Setup
============================================================
rvm gem install capistrano
capify .
config/deploy.rb

  set :application, "hello"
set :repository,  "git@github.com:smondal/hello-world.git"

set :scm, :git
set :scm_username, "sandip_mondal85@yahoo.co.in"
set :scm_password, '29152808'
set :scm_verbose, true

set :deploy_via, :remote_cache #for git it will deploy very soon full reposity clone every time

server "180.215.176.60", :app, :web, :db, :primary => true
set :user, "user"            #machine user name 
set :password, "passw0rd"
set :deploy_to, "/home/user/#{application}"

set :current_path, "#{deploy_to}/current"
set :releases_path, "#{deploy_to}/releases"
set :shared_path, "#{deploy_to}/shared"

set :use_sudo, false
set :branch, "master"
set :deploy_env, "development"

 
# Or: `accurev`, `bzr`, `cvs`, `darcs`, `git`, `mercurial`, `perforce`, `subversion` or `none`

# role :web, "your web-server here"                          # Your HTTP server, Apache/etc
# role :app, "your app-server here"                          # This may be the same as your `Web` server
# role :db,  "your primary db-server here", :primary => true # This is where Rails migrations will run
# role :db,  "your slave db-server here"

# if you're still using the scr	ipt/reaper helper you will need
# these http://github.com/rails/irs_process_scripts

# If you are using Passenger mod_rails uncomment this:
namespace :deploy do
  task :start do ; end
  task :stop do ; end
  task :restart, :roles => :app, :except => { :no_release => true } do
    run "#{try_sudo} touch #{File.join(current_path,'tmp','restart.txt')}"
  end
end



Github push
=============================================================
sudo git install git-core
ssh-keygen -t rsa -C "sandip_mondal85@yahoo.co.in"
git config --global user.name
git config --global user.email
rails new hello_world
cd hello_world
git init 
git add .
git commit -m "initial import" 
create a repository
git remote add origin git@github.com:smondal/installation_guide.git
git push origin master


note 
git remote rm origin



Nginx setup
===========================================================
sudo apt-get install libcurl4-openssl-dev
rvm 1.9.2 --passenger
rvm 1.9.2
gem install passenger         
rvmsudo passenger-install-nginx-module
sudo -R 777 /opt/nginx/sbin/nginx               # give the permission to nginx folde
sudo chmod -R 777 /opt/nginx/conf/nginx.conf    # give the conf file permission
tail -f /opt/nginx/logs/error.log               # show the log file
pkill nginx                                     # kill the nginx process
/opt/nginx/sbin/nginx                           # start enginx
vi /opt/nginx/conf/nginx.conf                   #
        
#user  nobody;
#user www;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
	    
pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    passenger_root /home/user/.rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.8;
    passenger_ruby /home/user/.rvm/wrappers/ruby-1.9.2-p290/ruby;
    passenger_max_pool_size 10;
   # access_log  logs/localhost.access.log  main;	
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    server {
        listen       8080;
        server_name  localhost;
#	access_log   logs/domain2.access.log  main;		
	root /home/user/hello_world/public;
#	root /home/user/project/db
	passenger_enabled on;
	passenger_use_global_queue on;
	rails_env development;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

     #   location / {
      #      root   html;
       #     index  index.html index.htm;
       # }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}


